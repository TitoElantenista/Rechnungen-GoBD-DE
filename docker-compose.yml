version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: rechnungen-db
    environment:
      POSTGRES_USER: rechnungen
      POSTGRES_PASSWORD: rechnungen_secure_password
      POSTGRES_DB: rechnungen_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rechnungen"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: rechnungen-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rechnungen-backend
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: postgresql://rechnungen:rechnungen_secure_password@postgres:5432/rechnungen_db
      
      # S3 Storage
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin123
      S3_BUCKET: invoices
      S3_REGION: eu-central-1
      S3_USE_SSL: "false"
      
      # TSA Configuration (RFC3161)
      TSA_URL: ${TSA_URL:-http://timestamp.digicert.com}
      TSA_USERNAME: ${TSA_USERNAME:-}
      TSA_PASSWORD: ${TSA_PASSWORD:-}
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-change_this_super_secret_key_in_production}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      
      # CORS
      CORS_ORIGINS: http://localhost:5173,http://localhost:3000
      
      # App
      ENVIRONMENT: development
      DEBUG: "true"
    volumes:
      - ./backend:/app
      - ./storage:/storage
    ports:
      - "8000:8000"
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: rechnungen-frontend
    depends_on:
      - backend
    environment:
      VITE_API_URL: http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    command: npm run dev -- --host

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local

networks:
  default:
    name: rechnungen-network
